name: Renderer Performance Report

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # 也可以添加定时运行，每周监测一次性能变化
  schedule:
    - cron: '0 0 * * 1'  # 每周一运行

jobs:
  performance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # 安装Puppeteer和其他需要的工具
      - name: Install test dependencies
        run: npm install --no-save puppeteer
      
      # 构建项目  
      - name: Build project
        run: npm run build
      
      # 启动本地服务器来运行构建后的项目
      - name: Start local server
        run: npx serve dist &
        
      # 等待服务器启动
      - name: Wait for server
        run: sleep 5
      
      # 运行Lighthouse进行性能分析 - 桌面版
      - name: Run Lighthouse - Desktop
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: '.github/workflows/lighthouse-config.json'
          runs: 3  # 运行多次取平均值，提高准确性
          
      # 运行Lighthouse进行性能分析 - 移动版
      - name: Run Lighthouse - Mobile
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: '.github/workflows/lighthouse-config.json'
          runs: 3  # 运行多次取平均值，提高准确性
          emulatedFormFactor: mobile
      
      # 收集WebGL/WebGPU性能指标
      - name: Collect Renderer Performance Metrics
        run: node .github/workflows/collect-renderer-metrics.js
        
      # 将性能报告发布到PR评论
      - name: Add Performance Report to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('./lighthouse-results.json', 'utf8'));
            
            const formatScore = (score) => {
              const scoreNum = Math.round(score * 100);
              let emoji = '🟢';
              if (scoreNum < 50) emoji = '🔴';
              else if (scoreNum < 90) emoji = '🟠';
              return `${emoji} ${scoreNum}`;
            };
            
            let body = `## 🚀 Performance Report\n\n`;
            
            // 添加渲染器信息
            if (results.renderer) {
              const r = results.renderer;
              body += `### 🎮 ${r.engine} (${r.rendererType}) Performance\n\n`;
              
              // 渲染器信息表
              body += `#### Renderer Information\n`;
              if (r.rendererInfo && Object.keys(r.rendererInfo).length > 0) {
                body += `| Property | Value |\n`;
                body += `| ------ | ----- |\n`;
                
                for (const [key, value] of Object.entries(r.rendererInfo)) {
                  if (value) {
                    body += `| ${key.charAt(0).toUpperCase() + key.slice(1)} | ${value} |\n`;
                  }
                }
                body += `\n`;
              }
              
              // 性能指标表
              body += `#### Performance Metrics\n`;
              body += `| Metric | Value |\n`;
              body += `| ------ | ----- |\n`;
              body += `| Average FPS | ${r.avgFps} |\n`;
              body += `| Min FPS | ${r.minFps} |\n`;
              body += `| Draw Calls per Frame | ${r.drawCalls} |\n`;
              body += `| Triangle Count | ${r.triangles} |\n`;
              body += `| Memory Usage | ${r.memoryUsage}MB |\n\n`;
            }
            
            // Web Vitals
            body += `### 📊 Desktop Web Vitals\n\n`;
            body += `| Metric | Score |\n`;
            body += `| ------ | ----- |\n`;
            body += `| Performance | ${formatScore(results.desktop.performance)} |\n`;
            body += `| First Contentful Paint | ${results.desktop.first_contentful_paint}ms |\n`;
            body += `| Largest Contentful Paint | ${results.desktop.largest_contentful_paint}ms |\n`;
            body += `| Total Blocking Time | ${results.desktop.total_blocking_time}ms |\n`;
            body += `| Cumulative Layout Shift | ${results.desktop.cumulative_layout_shift} |\n\n`;
            
            body += `### 📱 Mobile Web Vitals\n\n`;
            body += `| Metric | Score |\n`;
            body += `| ------ | ----- |\n`;
            body += `| Performance | ${formatScore(results.mobile.performance)} |\n`;
            body += `| First Contentful Paint | ${results.mobile.first_contentful_paint}ms |\n`;
            body += `| Largest Contentful Paint | ${results.mobile.largest_contentful_paint}ms |\n`;
            body += `| Total Blocking Time | ${results.mobile.total_blocking_time}ms |\n`;
            body += `| Cumulative Layout Shift | ${results.mobile.cumulative_layout_shift} |\n\n`;
            
            // 优化建议
            let suggestions = [];
            
            // 基于FPS提供建议
            if (results.renderer && parseFloat(results.renderer.avgFps) < 50) {
              suggestions.push('- Consider reducing geometry complexity or optimizing shaders to improve FPS');
            }
            
            // 基于绘制调用提供建议
            if (results.renderer && results.renderer.drawCalls > 1000) {
              suggestions.push('- High number of draw calls detected. Consider using geometry instancing or merging geometries');
            }
            
            // 基于三角形数量提供建议
            if (results.renderer && results.renderer.triangles > 1000000) {
              suggestions.push('- Very high triangle count. Consider using LOD (Level of Detail) for complex models');
            }
            
            // 基于内存使用提供建议
            if (results.renderer && results.renderer.memoryUsage > 200) {
              suggestions.push('- High memory usage. Consider optimizing textures and assets');
            }
            
            // 针对WebGPU的建议
            if (results.renderer && results.renderer.rendererType === 'webgpu') {
              suggestions.push('- For WebGPU performance, ensure you\'re using modern rendering patterns like instanced rendering and compute shaders');
              suggestions.push('- Consider implementing frame graph architecture for optimal GPU resource management');
            }
            
            // 输出优化建议
            if (suggestions.length > 0) {
              body += `### 💡 Optimization Suggestions\n\n`;
              suggestions.forEach(suggestion => {
                body += `${suggestion}\n`;
              });
              body += `\n`;
            }
            
            body += `[📋 Full Report](${results.reportUrl})\n\n`;
            body += `<details><summary>📈 Performance Trends</summary>\n\n`;
            body += `![Performance Trend](${results.performanceTrendUrl})\n\n`;
            body += `</details>\n\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });